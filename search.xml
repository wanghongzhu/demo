<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务端开发常识</title>
      <link href="/2019/04/23/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E8%AF%86/"/>
      <url>/2019/04/23/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-服务端开发总目标："><a href="#1-服务端开发总目标：" class="headerlink" title="1.服务端开发总目标："></a>1.服务端开发总目标：</h2><p>  网页 —&gt;  静态网站 —&gt;  动态网站</p><p>  网页： 我们使用 html、css、Javascript做出来的页面就是网页。 只能自己使用浏览器打开。其他人是不能通过浏览器访问到的。</p><p>  静态网站： 将我们做好的网页网页，放入服务器指定的目录下，然后使用  <a href="http://ip:port/index.html" target="_blank" rel="noopener">http://ip:port/index.html</a> 访问到的网页（<a href="http://127.0.0.1:3000/index.html" target="_blank" rel="noopener">http://127.0.0.1:3000/index.html</a> 、<a href="http://192.168.97.103:3000/index.html）。静态网站的特点是无论怎样刷新页面，页面的数据都是一样的，不会放生改变。" target="_blank" rel="noopener">http://192.168.97.103:3000/index.html）。静态网站的特点是无论怎样刷新页面，页面的数据都是一样的，不会放生改变。</a></p><p>  动态网站： 同样还是使用 <a href="http://ip:port/index.html" target="_blank" rel="noopener">http://ip:port/index.html</a> (例如：<a href="http://192.168.97.103:3000/index.html" target="_blank" rel="noopener">http://192.168.97.103:3000/index.html</a>) 访问到的网页，但是每次页面所显示的数据是不一样。因为页面上的数据来自于数据库（MySQL）。</p><p>  开发动态网站需要一种后端技术的支撑： PHP、 JSP、 ASP、==Nodejs==等。</p><h2 id="2-Web服务器"><a href="#2-Web服务器" class="headerlink" title="2. Web服务器"></a>2. Web服务器</h2><p>  问题: 当我们写好一个html文件，放在桌面上时，别人能不能通过浏览器访问？<br>  答: 不行。 必须将我们的html文件放入==web服务器==，其他人通过网络才能访问。</p><h3 id="1-1-什么是服务器？"><a href="#1-1-什么是服务器？" class="headerlink" title="1.1 什么是服务器？"></a>1.1 什么是服务器？</h3><p>   服务器可以从硬件、软件(系统软件、应用软件)两个角度描述。</p><p>   按硬件描述： 服务器就是一台超级计算机。<br>   按系统划分： 在硬件上安装了什么操作系统，就可以称为该系统的服务器<br>                       例如:  linux服务器、windows服务器、unix服务器等。<br>   按软件划分： 在操作系统中安装了什么软件，就可以称作该软件的服务器<br>                       例如:  ==apache服务器、数据库服务器==、邮件服务器等。</p><h3 id="1-2-Web服务器"><a href="#1-2-Web服务器" class="headerlink" title="1.2 Web服务器"></a>1.2 Web服务器</h3><p>  Web服务器就是安装了Web服务软件，能够提供网站服务的服务器。淘宝、京东、新浪等等</p><p>  常见的Web软件：<br>    ==Apache==、Nginx、IIS、Tomcat、==Nodejs== 等。<br>    Apache服务器、Nginx服务器、IIS服务器、Tomcat服务器、Nodejs服务器</p><p>  PS: web服务器又叫做http/httpd服务器</p><p><img src="/2019/04/23/服务端开发常识/1.png" alt="1"></p><h2 id="3-网站基础概念"><a href="#3-网站基础概念" class="headerlink" title="3. 网站基础概念"></a>3. <strong>网站基础概念</strong></h2><h3 id="3-1-URL地址解析"><a href="#3-1-URL地址解析" class="headerlink" title="3.1 URL地址解析"></a>3.1 URL地址解析</h3><p>浏览器中输入的地址：  127.0.0.1/p-buy/index.html</p><p>实际全地址：  <a href="http://127.0.0.1:80/p-buy/index.html" target="_blank" rel="noopener">http://127.0.0.1:80/p-buy/index.html</a></p><ul><li><p>http： 协议名, http协议（超文本传输协议）</p></li><li><p>127.0.0.1： 服务器IP地址</p></li><li><p>80： Apache服务器的默认端口号</p></li><li><p>/p-buy/index.html： 要访问的文件路径</p></li></ul><h3 id="3-2-IP地址"><a href="#3-2-IP地址" class="headerlink" title="3.2 IP地址"></a>3.2 <strong>IP</strong>地址</h3><p>IP: Internet Protocol  互联网协议，是为计算机网络相互连接进行通信而设计的协议。</p><ul><li>处于网络（互联网、局域网）上的任何一台计算机都有一个独立的ip地址。</li><li>ip地址由4段3位长度的数字组成， 3位数字的取值范围 0-255。如： 102.15.201.10 </li></ul><p>特殊ip:</p><ul><li>127.0.0.1 : 回环地址，每一台电脑都有该ip，指向当前使用的电脑</li><li>192.168.*<em>.</em> *: 该网段是专门用于做==局域网==的ip段。</li></ul><p><img src="/2019/04/23/服务端开发常识/20.png" alt="1552215581016"></p><h3 id="3-3-域名"><a href="#3-3-域名" class="headerlink" title="3.3 域名"></a>3.3 域名</h3><p>   域名（Domain Name）： 每个网站都有一个自己的域名。人们可以在浏览器中输入域名来访问对应的网站。</p><p>   淘宝: <a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a></p><p>   百度: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>   特殊域名：<br>          localhost: 本地主机。在浏览器中输入localhost就会访问当前操作的这台电脑的web服务器。</p><h3 id="3-4-DNS"><a href="#3-4-DNS" class="headerlink" title="3.4 DNS"></a>3.4 DNS</h3><p>==核心： 域名虽然也是唯一的，但是要在互联网上找到一个具体网站，还是要靠IP地址。==</p><p>DNS: Domain Name System  域名系统。在DNS服务器中保存了域名和IP的映射关系。主要工作是将域名转换为IP地址，因为我们通过浏览器访问网站时，实际上是去找对应的IP地址。</p><p>   域名: 网站的名称，就相当于人名。<br>   IP: 网站在网络上的实际地址，就相当于人的住址。</p><p>   一般访问网站时都是输入域名的(例如： <a href="http://www.tmall.com" target="_blank" rel="noopener">www.tmall.com</a>  <a href="http://www.163.com)，但是在实际访问时域名会被DNS转换为IP地址。" target="_blank" rel="noopener">www.163.com)，但是在实际访问时域名会被DNS转换为IP地址。</a></p><p>   DNS工作机制图:</p><p><img src="/2019/04/23/服务端开发常识/16.png" alt="16"></p><p> hosts文件可以手动设置域名和IP的映射关系</p><p> dns缓存可以保存曾经访问过的域名和IP的映射关系</p><p>工作步骤:</p><p>1)  在浏览器中输入  <a href="http://www.taobao.com，按下回车" target="_blank" rel="noopener">www.taobao.com，按下回车</a></p><p>2)  浏览器首先在本机中的 hosts文件和dns缓存中查询，<a href="http://www.taobao.com的IP地址。如果有，则获取该IP地址，然后去访问淘宝服务器。" target="_blank" rel="noopener">www.taobao.com的IP地址。如果有，则获取该IP地址，然后去访问淘宝服务器。</a> 如果没有，则向dns服务器发送解析请求。</p><p>3) dns服务器获取到浏览器请求信息之后， 将域名转换为IP地址，再将IP地址返回给浏览器。</p><p>4) 浏览器获取到IP地址，然后通过IP地址访问淘宝服务器。 </p><p> windows下查看dns缓存:<br>    ipconfig  /displaydns<br>    ipconfig  /displaydns &gt; c:/dnscache.txt   将dns缓存导入到c:/dnscache.txt文件</p><p> windows下清除dns缓存<br>    ipconfig  /flushdns</p><p>苹果/安卓手机： /etc/hosts</p><h3 id="3-5-端口"><a href="#3-5-端口" class="headerlink" title="3.5 端口"></a>3.5 端口</h3><p>端口是英文port的意译。端口可以理解为区分服务器上服务的标号。</p><p><img src="/2019/04/23/服务端开发常识/17.png" alt="17"></p><p> 已被占用的著名端口号：<br>    80:   Web服务器端口号， Apache、Nginx、IIS<br>    3306: MySQL默认端口号<br>    8080: tomcat默认端口号<br>    21:   FTP端口号， FTP软件<br>    22:   SSH端口号<br>    25:   sendmail端口号<br>    ……</p><p>  因为Web服务的默认端口号是80，所以在地址栏可以不输入，但是如果将端口号改为其他的（如：8088），那就必须输入端口号，才能正常访问。</p><p>   端口号的取值范围： 0-65535</p><h3 id="3-6-C-S和B-S架构"><a href="#3-6-C-S和B-S架构" class="headerlink" title="3.6 C/S和B/S架构"></a>3.6 C/S和B/S架构</h3><p>  C/S软件体系结构，即Client/Server (客户端/服务器)结构。<br>     核心特点：==要下载一个客户端==，例如：QQ、微信、LOL、王者荣耀、绝地求生等。   </p><p>  C/S结构的软件，服务器主要做==数据转发==工作。以QQ聊天为例：<br>     任何两个人聊天的内容都会发送到QQ服务器上，然后再由QQ服务器进行转发</p><pre><code> 王小贱和小仙女聊天    唐小贱发送一句话，这句话会先发送到QQ服务器，再由QQ服务器转发到小仙女的客户端。</code></pre><p><img src="/2019/04/23/服务端开发常识/18.png" alt="1525243346757"></p><p>   B/S软件体系结构，即Browser/Server （浏览器/服务器）结构。<br>       核心特点：==使用浏览器（Chrome、Firefox等）进行操作==，例如：淘宝、京东、新浪等。</p><p>   B/S结构软件，服务器承担了所有业务，浏览器只是用来显示最终内容的。</p><p><img src="/2019/04/23/服务端开发常识/19.png" alt="1525243588778"></p><p>思考问题： B/S的优势和劣势， C/S的优势和劣势。</p><p> B/S的优势: 部署方便，容易维护。用户使用方便（一个浏览器即可）。<br> B/S的劣势: 客户端功能简单</p><p> C/S的优势: 客户端功能强大<br> C/S的劣势: 必须下载客户端非常麻烦，升级维护麻烦</p>]]></content>
      
      
      <categories>
          
          <category> 开发常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法基础</title>
      <link href="/2019/04/23/ES6%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/04/23/ES6%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/04/23/ES6语法基础/ES6语法基础.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Git的简介、安装、使用和常用命令</title>
      <link href="/2019/04/23/git/"/>
      <url>/2019/04/23/git/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Git"><a href="#一、什么是Git" class="headerlink" title="一、什么是Git"></a>一、什么是Git</h2><p>Git是目前世界上最先进的分布式 <font color="red">源代码</font> 版本控制系统，免费，开源</p><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds (林纳斯.托瓦斯) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, SVN 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><p>Git(软件)是 林纳斯.托瓦斯 于2005年开发的源代码版本控制系统  ，同时也是linux系统内核(1991年)创始人：</p><p><img src="/2019/04/23/git/1.png" alt></p><h2 id="二、Git的作用"><a href="#二、Git的作用" class="headerlink" title="二、Git的作用"></a>二、Git的作用</h2><ol><li><strong>协同</strong>多人对同一个项目进行开发</li><li>解决多人在同时间对相同文件开发的合并<strong>冲突</strong>问题</li><li>给每个文件的每次修改操作做<strong>日志标记</strong>，方便后期查找维护</li></ol><p>源代码版本控制管理系统 是一个 <strong>时光穿梭机</strong>，可以查看到一个文件之前<strong>某年某月某日某时刻</strong>是什么样子的</p><h2 id="三、Git的安装"><a href="#三、Git的安装" class="headerlink" title="三、Git的安装"></a>三、Git的安装</h2><p>针对不同操作系统有如下各自的下载安装方式(我们以windows系统为主)：</p><ol><li><p>Windows安装</p><p><a href="http://git-scm.com/download/win" target="_blank" rel="noopener">http://git-scm.com/download/win</a><br>下载Git客户端软件，和普通软件安装方式一样。</p></li></ol><p><img src="/2019/04/23/git/3.png" alt></p><p>​    (根据自己操作位数选取安装，安装步骤选项都设置默认的即可)</p><p>​    安装参考：</p><p>​    <img src="/2019/04/23/git/1555591946414.png" alt="1555591946414"></p><p>​    <img src="/2019/04/23/git/1555592068226.png" alt="1555592068226"></p><p>​    <img src="/2019/04/23/git/1555592102980.png" alt="1555592102980"></p><p>​    <img src="/2019/04/23/git/1555592185476.png" alt="1555592185476"></p><p>​    <img src="/2019/04/23/git/1555592316279.png" alt="1555592316279"></p><p>​    <img src="/2019/04/23/git/1555592374631.png" alt="1555592374631"></p><p>​    <img src="/2019/04/23/git/1555592484598.png" alt="1555592484598"></p><p>​    <img src="/2019/04/23/git/1555592525335.png" alt="1555592525335"></p><ul><li><blockquote><p>文件从版本库更新的windows本地，会把其中的行结束符号转变为win版的</p><p>文件从本地commit提交到版本库后，会把其中的行结束符号会变为unix版的</p><p>\r\n：是window系统换行符号，占据2个字节大小   [CRLF]</p><p>\n: unix(linux)系统内换行符号，占据1个字节大小   [LF]</p></blockquote></li></ul><pre><code>    ![1555592724738](git/1555592724738.png)    ![1555592860415](git/1555592860415.png)    ![1555592904215](git/1555592904215.png)    ![1555592917237](git/1555592917237.png)</code></pre><p>​    安装完毕，鼠标右键会有git的相关命令按钮：</p><p><img src="/2019/04/23/git/1555592943949.png" alt="1555592943949"></p><h2 id="三、Git的使用"><a href="#三、Git的使用" class="headerlink" title="三、Git的使用"></a>三、Git的使用</h2><h3 id="1-配置用户"><a href="#1-配置用户" class="headerlink" title="1.配置用户"></a>1.配置用户</h3><p>给git配置账号信息，以便在本地<code>版本库</code>中记录各种操作都是那些用户所为</p><pre class=" language-javascript"><code class="language-javascript">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"sunshuhua"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"shuhua141@163.com"</span></code></pre><p>在 git bash终端可以实现内容的复制、粘贴</p><p>复制：Ctrl+Insert</p><p>粘贴：Shift+Insert</p><p><img src="/2019/04/23/git/1555639077901.png" alt="1555639077901"></p><p><img src="/2019/04/23/git/1555639119891.png" alt="1555639119891"></p><h3 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2.简单使用"></a>2.简单使用</h3><ol><li>创建版本库</li></ol><p><img src="/2019/04/23/git/1555637086479.png" alt="1555637086479"></p><ol start="2"><li>效果：</li></ol><p><img src="/2019/04/23/git/1555637101340.png" alt="1555637101340"></p><ol start="3"><li><p>在pro01目录中创建index.js文件</p><pre><code> ![1555637298028](../../%E7%AC%AC11%E5%A4%A9/%E7%AC%94%E8%AE%B0/git/1555637298028.png)</code></pre></li><li><p>利用git管理创建好的index.js文件</p><pre><code> ![1555637373353](../../%E7%AC%AC11%E5%A4%A9/%E7%AC%94%E8%AE%B0/git/1555637373353.png) 现在git对index.js文件已经形成管理</code></pre></li></ol><h3 id="3-三个区域"><a href="#3-三个区域" class="headerlink" title="3.三个区域"></a>3.三个区域</h3><p>使用git过程中，有三个区域要频繁操作：</p><ol><li>工作区：就是自己电脑运行项目文件的目录</li><li>暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中</li><li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库</li></ol><p><img src="/2019/04/23/git/1554721327552.png" alt="1554721327552"></p><p><img src="/2019/04/23/git/1555637451468.png" alt="1555637451468"></p><p><img src="/2019/04/23/git/1555637551749.png" alt="1555637551749"></p><p><img src="/2019/04/23/git/1555637640099.png" alt="1555637640099"></p><h2 id="四、初始化仓库"><a href="#四、初始化仓库" class="headerlink" title="四、初始化仓库"></a>四、初始化仓库</h2><p>本地方式，在项目代码目录执行如下指令：</p><pre><code>   $ git init</code></pre><blockquote><p>该命令执行完后会在当前目录生成一个 .git 目录</p></blockquote><h2 id="五、基本操作"><a href="#五、基本操作" class="headerlink" title="五、基本操作"></a>五、基本操作</h2><h3 id="1-添加文件到暂存区"><a href="#1-添加文件到暂存区" class="headerlink" title="1.添加文件到暂存区"></a>1.添加文件到暂存区</h3><p><img src="/2019/04/23/git/1554721280412.png" alt="1554721280412"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 提交单个文件</span>$ git add test<span class="token punctuation">.</span>txt<span class="token comment" spellcheck="true">// 提交单个目录文件</span>$ git add css<span class="token comment" spellcheck="true">// 提交所有文件</span>$ git add <span class="token punctuation">.</span><span class="token operator">|</span><span class="token operator">*</span><span class="token operator">|</span><span class="token operator">-</span>A     <span class="token comment" spellcheck="true">// 或.   或*   或-A</span></code></pre><h3 id="2-提交文件到版本库"><a href="#2-提交文件到版本库" class="headerlink" title="2.提交文件到版本库"></a>2.提交文件到版本库</h3><p><img src="/2019/04/23/git/1554721313807.png" alt="1554721313807"></p><p>将暂存区<strong>全部</strong>有需要的文件<font color="red">一次性</font>提交到本地<strong>版本库</strong>中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// message 提交的备注信息，方便后期查看维护使用</span>$ git commit <span class="token operator">-</span>m <span class="token string">"message"</span><span class="token punctuation">;</span></code></pre><p><img src="/2019/04/23/git/1555245892237.png" alt="1555245892237"></p><p>对同一个或多个文件进行多次commit后会形成多个版本，每提交一次就形成一个，HEAD(git的指针，用以指明当前正在使用的版本)默认指向当前最新的版本(当然HEAD根据需要也可以指向之前的版本)</p><h2 id="六、相关指令"><a href="#六、相关指令" class="headerlink" title="六、相关指令"></a>六、相关指令</h2><h3 id="1-查看文件状态"><a href="#1-查看文件状态" class="headerlink" title="1.查看文件状态"></a>1.查看文件状态</h3><pre><code>$ git status -s            // 简短方式提示日志$ git status            // 正常提示日志</code></pre><p>新建、修改的文件通过该指令可以看出对比，</p><p><font color="red">红色</font>表示被 新建/修改，需要执行add操作，</p><p><font color="green">绿色</font>表示文件已经处于暂存区，需要执行commit操作</p><p><img src="/2019/04/23/git/1555639759987.png" alt="1555639759987"></p><blockquote><p>红色，表示该文件需要执行add操作，以便添加到 暂存区</p></blockquote><p><img src="/2019/04/23/git/1555639829976.png" alt="1555639829976"></p><blockquote><p>绿色，表示该文件目前正处于 暂存区，需要执行commit，提交到版本库</p></blockquote><p><img src="/2019/04/23/git/1555639934842.png" alt="1555639934842"></p><blockquote><p>表示 没有文件需要执行 add 或  commit操作</p></blockquote><p><img src="/2019/04/23/git/1555640480980.png" alt="1555640480980"></p><h3 id="2-查看操作日志"><a href="#2-查看操作日志" class="headerlink" title="2.查看操作日志"></a>2.查看操作日志</h3><pre><code>$ git log</code></pre><p><img src="/2019/04/23/git/1555640042586.png" alt="1555640042586"></p><p><img src="/2019/04/23/git/1555640219101.png" alt="1555640219101"></p><h2 id="七、分支"><a href="#七、分支" class="headerlink" title="七、分支"></a>七、分支</h2><p><img src="/2019/04/23/git/1555595818124.png" alt="1555595818124"></p><p>在我们的现实开发中，需求往往是五花八门的，同时开发多个需求的情况十分常见，</p><p>比如当你正在专注开发一个功能时，突然有一个紧急的BUG需要你来修复，</p><p>这个时候我们当然是希望在能够保存当前任务进度，再去修改这个BUG，</p><p>等这个BUG修复完成后再继续我们的任务。如何实现呢？</p><p>通过Git<strong>创建分支</strong>来解决实际开发中类似的问题。</p><p><img src="/2019/04/23/git/1555593660045.png" alt="1555593660045"></p><p>当前开发的功能先搁浅，立即创建并切换到一个新分支上，并在其上面对一些紧急任务进行处理</p><p>这样当前开发任务  和 紧急处理任务 可以不受影响地平行处理</p><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>git分支是当前开发的一个主线，在该主线上可以通过add/commit执行形成多个版本，当不想在该分支开发时，可以创建并切换到另外的一个分支，新分支与之前的分支没有任何关联，两者独立开发，提升开发效率</p><p>新分支的内容来至与切换分支，但是与切换分支没有关系了</p><p>新分支开发完毕再切换回原分支，文件内容状态还停留在切换之前的样子</p><p><img src="/2019/04/23/git/1555641507759.png" alt="1555641507759"></p><h3 id="1-创建分支-cart"><a href="#1-创建分支-cart" class="headerlink" title="1.创建分支 cart"></a>1.创建分支 cart</h3><p>当接到一个新任务时，先创建一个分支，例如购物车功能  git branch cart</p><p>新分支会在当前分支原有历史版本的结点上进行创建，我们称其为子分支</p><pre class=" language-javascript"><code class="language-javascript">$ git branch             <span class="token comment" spellcheck="true">// 查看所有分支</span>$ git branch cart        <span class="token comment" spellcheck="true">// 创建名称为cart的分支</span></code></pre><h3 id="2-切换-cart-分支"><a href="#2-切换-cart-分支" class="headerlink" title="2.切换 cart 分支"></a>2.切换 cart 分支</h3><pre class=" language-javascript"><code class="language-javascript">$ git checkout cart    <span class="token comment" spellcheck="true">// 切换到名称为cart的分支上</span>或$ git checkout <span class="token operator">-</span>b cart    <span class="token comment" spellcheck="true">// 创建并切换到cart分支上</span></code></pre><p><img src="/2019/04/23/git/1555246309010.png" alt="1555246309010"></p><h3 id="3-在-cart-分支修改操作"><a href="#3-在-cart-分支修改操作" class="headerlink" title="3.在 cart 分支修改操作"></a>3.在 cart 分支修改操作</h3><p>对分支内容进行修改，然后 add和commit形成新版本</p><p>这次的提交历史版本就会记录在cart这个分支上了，并且HEAD伴随(cart)在移动</p><p><img src="/2019/04/23/git/1555246403927.png" alt="1555246403927"></p><h3 id="4-切换-master-分支"><a href="#4-切换-master-分支" class="headerlink" title="4.切换 master 分支"></a>4.切换 master 分支</h3><p>分支修改提交完毕后，把分支再切换回<a href>master主分支</a>：</p><pre><code>$ git checkout master</code></pre><p>当我们切换回master后，HEAD指向了离开前的的版本位置，并且发现当前分支的文件内容还是原来的”模样”</p><p>HEAD：是指引(指针)，指明当前分支正在使用的版本，默认都是最后的版本，每commit一次，就形成一个新版本，HEAD就会自动向后指明这个版本</p><p><img src="/2019/04/23/git/1555246475047.png" alt="1555246475047"></p><p>注意，版本切换和恢复按照 “从哪来就回哪去” 的原则进行，</p><p>例如从master的2版本切换到cart分支的，cart分支本身也形成了多个版本，那么其再回master后，也是原来的2版本</p><p><img src="/2019/04/23/git/1555508060718.png" alt="1555508060718"></p><p>体会：</p><p>当我们 ‘git checkout 分支名称’，HEAD就会指向当前分支的某个版本(可能是最后的版本，也可能是某个)，工作区 中的源码也会随当前分支当前版本发生变化。</p><p>这个时候就在当前分支上进行功能开发，而原来分支上的源码并未受到影响。</p><p>但是这时的原分支并没有包含进当前分支开发的功能</p><h3 id="5-合并-cart-分支"><a href="#5-合并-cart-分支" class="headerlink" title="5.合并 cart 分支"></a>5.合并 cart 分支</h3><p>切换回master主分支后，使得cart分支 与 当前的master分支合并，这样cart分支的功能代码就融入到master主分支里边了</p><pre class=" language-javascript"><code class="language-javascript">$ git merge cart</code></pre><blockquote><p>git允许任意两个分支做合并</p></blockquote><p><img src="/2019/04/23/git/1555246575448.png" alt="1555246575448"></p><p><img src="/2019/04/23/git/1555643670685.png" alt="1555643670685"></p><p><img src="/2019/04/23/git/1555643753968.png" alt="1555643753968"></p><h3 id="6-删除-cart-分支"><a href="#6-删除-cart-分支" class="headerlink" title="6.删除 cart 分支"></a>6.删除 cart 分支</h3><p>当一个分支的使命完成后，如果失去存在的价值，就可以给其删除掉</p><pre class=" language-javascript"><code class="language-javascript">$ git branch <span class="token operator">-</span>d cart</code></pre><p><img src="/2019/04/23/git/1555643961760.png" alt="1555643961760"></p><p>小结：</p><ol><li>一般项目中master主分支不做开发，全部的开发都在分支进行</li><li>为了使得master分支稳定，会创建一个develop分支，并做主要开发，待各个开发好的功能测试没有问题了再合并到master</li><li>一个分支的版本节点可以创建另一个分支，并且分支还可以继续拓扑创建子分支</li><li>各个分支的功能开发完毕并测试ok后就合并到master分支以供访问使用</li></ol><p><img src="/2019/04/23/git/1555247166676.png" alt="1555247166676"></p><p>使用步骤：</p><ol><li>查看和创建分支</li></ol><p><img src="/2019/04/23/git/1555642483083.png" alt="1555642483083"></p><p><img src="/2019/04/23/git/1555642553480.png" alt="1555642553480"></p><p><img src="/2019/04/23/git/1555642656072.png" alt="1555642656072"></p><p><img src="/2019/04/23/git/1555642734347.png" alt="1555642734347"></p><p><img src="/2019/04/23/git/1555642895274.png" alt="1555642895274"></p><p><img src="/2019/04/23/git/1555642967646.png" alt="1555642967646"></p><p>现在分支情况</p><p><img src="/2019/04/23/git/1555643102413.png" alt="1555643102413"></p><p>每个分支拥有的文件情况：</p><p><img src="/2019/04/23/git/1555643120704.png" alt="1555643120704"></p><h2 id="八、Git常用命令"><a href="#八、Git常用命令" class="headerlink" title="八、Git常用命令"></a>八、Git常用命令</h2><p><img src="/2019/04/23/git/64.git总结.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue(二)使用Element-ui组件库渲染后台系统登录页面</title>
      <link href="/2019/04/23/Vue(%E4%BA%8C)%E4%BD%BF%E7%94%A8Element-ui%E7%BB%84%E4%BB%B6%E5%BA%93%E6%B8%B2%E6%9F%93%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/04/23/Vue(%E4%BA%8C)%E4%BD%BF%E7%94%A8Element-ui%E7%BB%84%E4%BB%B6%E5%BA%93%E6%B8%B2%E6%9F%93%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>我们想要实现的最终效果为:</p><p>  <img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555817105664">使用Element-ui组件库渲染后台系统登录页面/1555817105664.png)</p><h2 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h2><p>执行指令</p><pre class=" language-javascript"><code class="language-javascript">vue init webpack vue<span class="token operator">-</span>shop<span class="token operator">-</span>pro</code></pre><p>把项目的结构文件创建出来</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555559594421">使用Element-ui组件库渲染后台系统登录页面/1555559594421.png)</p><h2 id="二、项目初始配置"><a href="#二、项目初始配置" class="headerlink" title="二、项目初始配置"></a>二、项目初始配置</h2><ul><li><p>在package.json中给webpack做指令配置</p><pre><code>&quot;scripts&quot;: {  &quot;line&quot;: &quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,  ...  &quot;pack&quot;: &quot;node build/build.js&quot;}</code></pre><blockquote><p>line: 在线运行指令参数</p><p>pack：物理打包指令参数</p></blockquote><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555559632595">使用Element-ui组件库渲染后台系统登录页面/1555559632595.png)</p></li><li><p>在config/index.js中做开发配置</p><pre><code>autoOpenBrowser: true</code></pre><blockquote><p>在线运行项目会自动开启浏览器</p></blockquote></li></ul><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555559918328">使用Element-ui组件库渲染后台系统登录页面/1555559918328.png)</p><h2 id="三、初始化Login-vue组件"><a href="#三、初始化Login-vue组件" class="headerlink" title="三、初始化Login.vue组件"></a>三、初始化Login.vue组件</h2><p>新建  src/components/Login.vue  文件，并设置简单内容</p><p>在  src/router/index.js  文件中给Login.vue配置路由</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'@/components/Login'</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token punctuation">}</span></code></pre><blockquote><p>可以把  src/App.vue  根组件的<strong>默认图片</strong>和<strong>css样式</strong>给去除掉</p></blockquote><ol><li><p>创建Login.vue文件并设置简单内容</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555560752890">使用Element-ui组件库渲染后台系统登录页面/1555560752890.png)</p></li><li><p>给Login.vue设置请求路由，具体在src/router/index.js设置</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555560793738">使用Element-ui组件库渲染后台系统登录页面/1555560793738.png)</p></li><li><p>给App.vue把默认图片和css样式去除</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555560844404">使用Element-ui组件库渲染后台系统登录页面/1555560844404.png)</p></li><li><p>访问效果</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555560855680">使用Element-ui组件库渲染后台系统登录页面/1555560855680.png)</p></li></ol><h2 id="四、绘制登录页面背景"><a href="#四、绘制登录页面背景" class="headerlink" title="四、绘制登录页面背景"></a>四、绘制登录页面背景</h2><h3 id="创建global-css样式文件"><a href="#创建global-css样式文件" class="headerlink" title="创建global.css样式文件"></a>创建global.css样式文件</h3><p>为了使得全部的组件都拥有<strong>统一</strong>的css样式，现在创建全局样式文件 src/assets/css/global.css</p><p>并填充如下内容</p><pre class=" language-css"><code class="language-css"><span class="token selector">html,body,<span class="token id">#app</span></span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555561369005">使用Element-ui组件库渲染后台系统登录页面/1555561369005.png)</p><h3 id="应用global-css"><a href="#应用global-css" class="headerlink" title="应用global.css"></a>应用global.css</h3><p>为了使得global.css生效，请在 src/main.js  主入口文件中做引入操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./assets/css/global.css'</span></code></pre><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555561452968">使用Element-ui组件库渲染后台系统登录页面/1555561452968.png)</p><h3 id="给登录页面绘制背景"><a href="#给登录页面绘制背景" class="headerlink" title="给登录页面绘制背景"></a>给登录页面绘制背景</h3><p>给  src/components/Login.vue  文件设置如下内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>用户登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#login-container</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#2b4b6b</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><blockquote><p>script标签 不需要时，可以暂时不用设置</p></blockquote><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555561476687">使用Element-ui组件库渲染后台系统登录页面/1555561476687.png)</p><p>现在登录页面效果：</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555561490567">使用Element-ui组件库渲染后台系统登录页面/1555561490567.png)</p><blockquote><p>上图的12306端口如果需要可以通过修改config/index.js配置文件设置</p></blockquote><h2 id="五、绘制登录盒子"><a href="#五、绘制登录盒子" class="headerlink" title="五、绘制登录盒子"></a>五、绘制登录盒子</h2><ol><li><p>准备素材图片   src/assets/Vue(二)使用Element-ui组件库渲染后台系统登录页面/logo.png</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555562376188">使用Element-ui组件库渲染后台系统登录页面/1555562376188.png)</p></li><li><p>给 src/components/Login.vue  文件做内容设置</p></li></ol><ul><li><p>template标签内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &lt;Vue(二)使用Element-ui组件库渲染后台系统登录页面/ src="../assets/Vue(二)使用Element-ui组件库渲染后台系统登录页面/logo.png" alt>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>style标签内容</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style lang="less" scoped><span class="token id">#login-container</span> </span><span class="token punctuation">{</span>  <span class="token selector">background-color: <span class="token id">#2b4b6b</span>;  height: 100%;  overflow: hidden;  <span class="token id">#login-box</span> </span><span class="token punctuation">{</span>    <span class="token selector">width: 450px;    height: 304px;    background-color: <span class="token id">#fff</span>;    border-radius: 4px;    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%, -50%);    <span class="token id">#logo-box</span> </span><span class="token punctuation">{</span>      <span class="token selector">width: 130px;      height: 130px;      border: 1px solid <span class="token id">#eee</span>;      border-radius: 50%;      padding: 8px;      box-shadow: 0 0 10px <span class="token id">#eee</span>;      position: absolute;      left: 50%;      transform: translate(-50%, -50%);      background-color: <span class="token id">#fff</span>;      Vue(二)使用Element-ui组件库渲染后台系统登录页面/ </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre></li></ul><p>在Login.vue中具体实现：</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555562410589">使用Element-ui组件库渲染后台系统登录页面/1555562410589.png)</p><p>style样式的具体代码：</p><pre><code>&lt;style lang=&quot;less&quot; scoped&gt;  .login-container{    background-color:#2b4b6b;    height:100%;    overflow: hidden;    .login-box{      width:450px;      height:304px;      background-color:#fff;      border-radius: 4px;      position:absolute;      left:50%;      top:50%;      transform: translate(-50%,-50%);      .avatar-box{        width:130px;        height:130px;        border:1px solid #eee;        border-radius: 50%;        padding:8px;        box-shadow: 0 0 10px #eee;        position:absolute;        left:50%;        transform:translate(-50%,-50%);        background-color:#fff;        Vue(二)使用Element-ui组件库渲染后台系统登录页面/{          width:100%;          height:100%;          border-radius: 50%;          background-color:#eee;        }      }    }  }&lt;/style&gt;</code></pre><p>现在登录窗口盒子和logo图片效果为：</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555562466639">使用Element-ui组件库渲染后台系统登录页面/1555562466639.png)</p><h2 id="六、绘制登录表单"><a href="#六、绘制登录表单" class="headerlink" title="六、绘制登录表单"></a>六、绘制登录表单</h2><h3 id="配置ElementUI"><a href="#配置ElementUI" class="headerlink" title="配置ElementUI"></a>配置ElementUI</h3><ul><li><p><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">Element-ui参考网址</a></p></li><li><p>运行指令安装element-ui</p><pre><code>npm install element-ui</code></pre><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555813418061">使用Element-ui组件库渲染后台系统登录页面//1555813418061.png)</p></li><li><p>安装plugin插件(使得element-ui可以做  按需引入)</p><pre><code>npm install babel-plugin-component -D </code></pre><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555813461151">使用Element-ui组件库渲染后台系统登录页面//1555813461151.png)</p></li><li><p>修改  .babelrc  配置文件给plugin做<strong>按需引入</strong>配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span>    <span class="token string">"component"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>      <span class="token string">"styleLibraryName"</span><span class="token punctuation">:</span> <span class="token string">"theme-chalk"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555813497005">使用Element-ui组件库渲染后台系统登录页面//1555813497005.png)</p></li><li><p>在项目主入口文件 src/main.js 中给element-ui做引入配置</p><pre><code>import ElementUI from &#39;element-ui&#39;Vue.use(ElementUI)</code></pre><blockquote><p>不需要引入相关的css文件，因为已经做了“按需引入”了</p></blockquote></li></ul><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555813587617">使用Element-ui组件库渲染后台系统登录页面//1555813587617.png)</p><p>之后重启webpack</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555813636315">使用Element-ui组件库渲染后台系统登录页面//1555813636315.png)</p><h3 id="绘制各个表单域"><a href="#绘制各个表单域" class="headerlink" title="绘制各个表单域"></a>绘制各个表单域</h3><p>绘制 用户名、密码、登录、重置 按钮等表单域</p><p>给 src/components/Login.vue  文件做内容设置</p><ul><li><p>template标签内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/Vue(二)使用Element-ui组件库渲染后台系统登录页面//logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginFormRef<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm.userpass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">push</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><blockquote><p>ref=”loginFormRef”   使得可以通过Vue方法找到当前的form表单</p><p>:model=”loginForm”     v-bind:属性绑定，把表单域信息对象绑定给model属性</p><p>​                    model在此处就是一个普通的属性名称，与v-model没有任何关系</p><p>el-row/el-col          是对内容列进行定位的</p><p>:offset=”15”              当前列的左侧的间隔格数</p></blockquote></li></ul><ul><li><p>script内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 用户登录表单数据对象(用户名、密码)</span>      loginForm<span class="token punctuation">:</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        userpass<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>style样式部分</p><pre class=" language-css"><code class="language-css">  <span class="token selector"><span class="token class">.login-box</span> </span><span class="token punctuation">{</span>  <span class="token selector">……    <span class="token class">.el-form</span> </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>在Login.vue的结构中绘制如下内容：</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555816398256">使用Element-ui组件库渲染后台系统登录页面/1555816398256.png)</p><h3 id="绘制图标"><a href="#绘制图标" class="headerlink" title="绘制图标"></a>绘制图标</h3><p>element-ui提供了一些图标，但是数量有限，如果需要其他图标可以去 阿里妈妈图标库 使用更全的图标</p><p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">图标库官网</a></p><p>具体使用：</p><ol><li>把下载好的图标库文件复制到项目指定位置：</li></ol><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555485937273">使用Element-ui组件库渲染后台系统登录页面/1555485937273.png)</p><ol start="2"><li><p>在main.js中引入图标库样式文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入“图标”css样式文件</span><span class="token keyword">import</span> <span class="token string">'./assets/fonts/iconfont.css'</span></code></pre><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555816797687">使用Element-ui组件库渲染后台系统登录页面/1555816797687.png)</p></li><li><p>在Login.vue中给表单域添加图标</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm.password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-3702mima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span></code></pre><p> 示例代码：</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555817092241">使用Element-ui组件库渲染后台系统登录页面/1555817092241.png)</p><p>效果：</p><p><img src="/2019/04/23/Vue(二)使用Element-ui组件库渲染后台系统登录页面/Vue(二" alt="1555817105664">使用Element-ui组件库渲染后台系统登录页面/1555817105664.png)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Element-ui组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue(一)使用脚手架搭建项目结构</title>
      <link href="/2019/04/22/vue%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/04/22/vue%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是vue-cli"><a href="#什么是vue-cli" class="headerlink" title="什么是vue-cli"></a>什么是vue-cli</h2><p>vue-cli 是一个<strong>脚手架</strong>工具，可以帮助开发者快速创建 vue 项目需要的<strong>骨架</strong>文件</p><p><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">官网</a></p><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555336054399.png" alt></p><h2 id="有什么好处"><a href="#有什么好处" class="headerlink" title="有什么好处"></a>有什么好处</h2><ul><li>不必自己搭建项目主结构文件目录</li><li>不必自己安装项目通用功能模块</li><li>不必自己给webpack做主要配置和loader安装配置</li><li>使得开发人员的全部精力集中在业务层面上</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>运行如下指令，安装 vue-cli工具</p><p>(带上 -g 参数，设置为全局安装，使得在系统的任何目录都可以使用)</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g vue<span class="token operator">-</span>cli            <span class="token comment" spellcheck="true">// 安装操作</span>npm un <span class="token operator">-</span>g vue<span class="token operator">-</span>cli                <span class="token comment" spellcheck="true">// 卸载操作</span></code></pre><blockquote><p>vue-cli分为2和3两个版本，前期先使用2版本即vue-cli，后期再对3版本做说明</p></blockquote><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555553312234.png" alt></p><p>查看安装好的vue-cli</p><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555553375822.png" alt></p><p>vue-cli工具安装完毕就可以通过如下指令初始化项目了(我们此处以pro01的项目名为例)</p><pre class=" language-javascript"><code class="language-javascript">vue init webpack my<span class="token operator">-</span>project   <span class="token comment" spellcheck="true">// 初始化项目</span></code></pre><p>接下来会提示如下参数选项(参考配置即可)：</p><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555553919763.png" alt></p><p>命令执行完毕会在…\Code\目录下自动形成pro01文件目录，内部是创建好的项目主结构文件</p><p>效果如下：</p><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555554030490.png" alt></p><p>主结构文件说明：</p><pre><code>|-- build                            // 项目构建(webpack)相关代码|   |-- build.js                         // 生产环境构建代码|   |-- check-version.js                 // 检查node、npm等版本|   |-- logo.png                         // logo图片|   |-- utils.js                         // 构建工具相关|   |-- vue-loader.conf.js                // vue-loader配置|   |-- webpack.base.conf.js**             // webpack基础配置|   |-- webpack.dev.conf.js**              // webpack开发环境配置|   |-- webpack.prod.conf.js**             // webpack生产环境配置|-- config                           // 项目开发环境配置|   |-- dev.env.js                       // 开发环境配置|   |-- index.js**                         // 项目主要配置(包括监听端口，打包路径等)|   |-- prod.env.js                      // 生产环境配置|-- src                              // 源码目录|   |-- assets                           // 静态资源 |   |-- components**                     // vue公共组件|   |-- router**                         // vue路由|   |-- App.vue**                        // 页面入口文件|   |-- main.js**                        // 程序入口文件，加载各种公共组件|-- static                           // 静态文件，比如一些图片，json数据等|   |-- data                           // 群聊分析得到的数据用于数据可视化|-- .babelrc                         // ES6语法编译配置|-- .editorconfig                    // 定义代码格式|-- .gitignore                       // git上传需要忽略的文件格式|-- .postcssrc.js                    // post-loader的插件配置文件|-- index.html**                       // 入口页面|-- package.json                     // 项目基本信息|-- package-lock.json                // 锁定当前安装的包的依赖|-- README.md                        // 项目说明</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>根据需要可以给<code>vue-cli</code>创建好的项目做基本配置</p><ul><li><p>给package.json做<code>打包</code>参数配置</p><blockquote><p>line: 在线运行指令参数</p><p>pack：物理打包指令参数</p></blockquote><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555554374574.png" alt></p></li></ul><ul><li>在config/index.js文件中设置项目运行<code>主机名</code>、<code>端口</code>、<code>自动开启浏览器</code> 的设置</li></ul><pre><code>autoOpenBrowser: true</code></pre><blockquote><p>在线运行项目会自动开启浏览器</p></blockquote><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555554507418.png" alt></p><p>运行效果：</p><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555554586720.png" alt></p><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555554597599.png" alt></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>vue-cli脚手架工具，可以辅助快速创建项目结构文件</li><li>安装完毕系统就有一个<code>vue</code>的指令可供生成项目主结构文件使用</li><li>创建项目主结构文件的同时，可以根据需要同时安装 路由、vue、eslint等常用功能包</li></ol><h2 id="给项目安装less扩展包"><a href="#给项目安装less扩展包" class="headerlink" title="给项目安装less扩展包"></a>给项目安装less扩展包</h2><p>通过vue-cli创建的项目主结构文件，默认没有less扩展包的，请安装</p><p>运行指令：</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>D less less<span class="token operator">-</span>loader</code></pre><p><img src="/2019/04/22/vue使用脚手架搭建项目结构/1555560395883.png" alt></p><p>(安装完毕，不需要配置，重启webpack即可)</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>vue-cli创建项目主结构文件的同时也会创建项目的文件目录，因此不要做重复了</p><p>创建好的项目主结构文件可以做自定义配置，例如：package.json、config/index.js、.prettierrc等</p><p>vue-cli默认没有安装less-loader/less 依赖包，需要自行安装</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印九九乘法表的业务逻辑</title>
      <link href="/2019/04/08/99/"/>
      <url>/2019/04/08/99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、九九乘法表的业务逻辑"><a href="#一、九九乘法表的业务逻辑" class="headerlink" title="一、九九乘法表的业务逻辑"></a>一、九九乘法表的业务逻辑</h2><p>此处以打印<code>*</code>为例。两层<code>for</code>循环嵌套，完成第一次外层<code>for</code>循环时内层循环打印一颗<code>*</code>,完成第二次外层<code>for</code>循环时内层循环打印两颗<code>*</code>，以此类推……结论为内层循环次数和外层循环正在进行第几次循环保持一致。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 外层for循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 内层循环次数需等于外层j的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'*'</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>效果图如下：<br><img src="/2019/04/08/99/3.png" alt></p><h2 id="二、九九乘法表的两种打印方式"><a href="#二、九九乘法表的两种打印方式" class="headerlink" title="二、九九乘法表的两种打印方式"></a>二、九九乘法表的两种打印方式</h2><h4 id="1-在控制台打印"><a href="#1-在控制台打印" class="headerlink" title="1) 在控制台打印"></a>1) 在控制台打印</h4><p>效果图如下：</p><p><img src="/2019/04/08/99/1.png" alt></p><p>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'x'</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> i<span class="token operator">*</span>j <span class="token operator">+</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-在浏览器上输出"><a href="#2-在浏览器上输出" class="headerlink" title="2)在浏览器上输出"></a>2)在浏览器上输出</h4><p>效果图如下：</p><p><img src="/2019/04/08/99/2.png" alt></p><p>样式代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>    table </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto <span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 隔行变色 */</span>    <span class="token selector">tr<span class="token pseudo-class">:nth-child(2n)</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 隔行变色 */</span>    <span class="token selector">tr<span class="token pseudo-class">:nth-child(2n+1)</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">td </span><span class="token punctuation">{</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">tr<span class="token pseudo-class">:nth-child(2n)</span> td<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">201</span>, <span class="token number">14</span>, <span class="token number">191</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">tr<span class="token pseudo-class">:nth-child(2n+1)</span> td<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">26</span>, <span class="token number">211</span>, <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style></code></pre><p>js 代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;table>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;tr>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;td>'</span><span class="token operator">+</span>i <span class="token operator">+</span> <span class="token string">'x'</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> i<span class="token operator">*</span>j<span class="token operator">+</span><span class="token string">'&lt;/td>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/tr>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/table>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> for循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的css鼠标进入动画</title>
      <link href="/2019/04/08/css/"/>
      <url>/2019/04/08/css/</url>
      
        <content type="html"><![CDATA[<p>本篇讲述的动画效果均基于 2d转化–&gt;<code>transform</code> 与 过渡–&gt;<code>transition</code>相结合，简单且实用。</p><p>应用时注意div基础样式需自行定义。</p><h2 id="文字和盒子共同旋转、放大"><a href="#文字和盒子共同旋转、放大" class="headerlink" title="文字和盒子共同旋转、放大"></a>文字和盒子共同旋转、放大</h2><p>效果图：</p><p><img src="/2019/04/08/css/1.gif" alt></p><p>注：为了使过渡效果更佳，我们应用了<a href="http://cubic-bezier.com/" target="_blank" rel="noopener">贝塞尔曲线</a></p><p>代码如下：</p><pre class=" language-css"><code class="language-css">&lt;style><span class="token comment" spellcheck="true">/* 2D转化效果1 */</span><span class="token selector"><span class="token class">.animate1</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 过渡时间为0.5s,使用贝塞尔曲线 */</span>    <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.5</span>s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span><span class="token number">.28</span>,<span class="token number">.19</span>,<span class="token number">.32</span>,<span class="token number">.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate1</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 旋转加放大 */</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;div class=<span class="token string">"animate1"</span>>hello world!&lt;/div></code></pre><h2 id="文字变大，背景盒子变小，有文字凸起效果"><a href="#文字变大，背景盒子变小，有文字凸起效果" class="headerlink" title="文字变大，背景盒子变小，有文字凸起效果"></a>文字变大，背景盒子变小，有文字凸起效果</h2><p>效果图：</p><p><img src="/2019/04/08/css/2.gif" alt></p><p>代码如下：</p><pre class=" language-css"><code class="language-css">&lt;style><span class="token comment" spellcheck="true">/* 2D转化效果2 */</span><span class="token selector"><span class="token class">.animate2</span>,<span class="token class">.animate2</span> div </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 过渡时间为0.5s,使用贝塞尔曲线 */</span>    <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.5</span>s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span><span class="token number">.28</span>,<span class="token number">.19</span>,<span class="token number">.32</span>,<span class="token number">.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate2</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 旋转加放大 */</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate2</span> div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;div class=<span class="token string">"animate2"</span>>    &lt;div>hello world!&lt;/div>&lt;/div></code></pre><h2 id="上下遮罩效果"><a href="#上下遮罩效果" class="headerlink" title="上下遮罩效果"></a>上下遮罩效果</h2><p>效果图：</p><p><img src="/2019/04/08/css/3.gif" alt></p><p>代码如下：</p><pre class=" language-css"><code class="language-css">&lt;style><span class="token comment" spellcheck="true">/* 2D转化效果3 */</span><span class="token selector"><span class="token class">.animate3</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate3</span><span class="token pseudo-class">:hover</span> <span class="token class">.top</span> </span><span class="token punctuation">{</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate3</span><span class="token pseudo-class">:hover</span> <span class="token class">.bottom</span> </span><span class="token punctuation">{</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.top</span> , <span class="token class">.bottom</span></span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.2</span>s <span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.top</span> </span><span class="token punctuation">{</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.4</span><span class="token punctuation">)</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bottom</span> </span><span class="token punctuation">{</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.4</span><span class="token punctuation">)</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;div class=<span class="token string">"animate3"</span>>hello world!    &lt;div class=<span class="token string">"top"</span>>&lt;/div>    &lt;div class=<span class="token string">"bottom"</span>>&lt;/div>&lt;/div></code></pre><h2 id="上下拉帘效果"><a href="#上下拉帘效果" class="headerlink" title="上下拉帘效果"></a>上下拉帘效果</h2><p>效果图：</p><p><img src="/2019/04/08/css/4.gif" alt></p><p>代码如下：</p><pre class=" language-css"><code class="language-css">&lt;style><span class="token comment" spellcheck="true">/* 2D转化效果4 */</span><span class="token selector"><span class="token class">.animate4</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.from_t</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.3</span>s linear<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate4</span><span class="token pseudo-class">:hover</span> <span class="token class">.from_t</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;div class=<span class="token string">"animate4"</span>>hello world!    &lt;div class=<span class="token string">"from_t"</span>>&lt;/div>&lt;/div></code></pre><h2 id="向上抖动效果"><a href="#向上抖动效果" class="headerlink" title="向上抖动效果"></a>向上抖动效果</h2><p><img src="/2019/04/08/css/5.gif" alt></p><p>代码如下：</p><pre class=" language-css"><code class="language-css">&lt;style><span class="token comment" spellcheck="true">/* 2D转化效果5 */</span><span class="token selector"><span class="token class">.animate5</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.4</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animate5</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;div class=<span class="token string">"animate5"</span>>hello world!&lt;/div></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transform </tag>
            
            <tag> transition </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
